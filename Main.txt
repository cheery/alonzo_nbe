The whole program sits in this file.
There wouldn't be any point to use multiple modules now.

We mostly need lists, maps and sets
as compiler implementations usually need.
Interfacing happens through console.







































We could use a supply monad
to get rid of the tricky 'nn' variable here.
But there is much more going on.

We would like the output to be pretty printing
for the reason that it's possibly read by the user.















Without monadic parsing, the parser would be a mess.
I first did it without and you can compare:
[git: 3ae3f22bf1edf0c31c798decacd123736c70ba89]

I started with the thing described in [2]
and adjusted it for my usecase a bit.

The whole thing is larger but the code that
has to be understood is much simpler.

Fortunately it's easy
to define monadic parsers using monads.
Even if Haskell requires that we also define
few other useful connectives while we're at it.
































Finally we're ready to define the actual parser.













The parsing module needs a mechanism to
have some relisiency toward parsing errors.
It's available thanks to some layout sensitivity.






The language this parser implements
is relatively simple.

statement:  identifier '=' term

term: '(' term ')'
term: identifier
term: term term
term: identifier 'â†¦' term














































































































The main question I'm exploring with this project.
How to create a good user interface
for a proof assistant?

Proof assistant differs from a compiler
by the need to communicate with the user
as the user is spending much more time with
examining the program output rather than the
output of the programs that both may produce.
















